type: edu
files:
- name: predictor/predictor.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import CheckResult, StageTest, dynamic_test, TestedProgram

    ASK_RANDOM_STRING = "Print a random string containing 0 or 1:"

    # Case test
    test_data_1 = [
        {
            "start": {"expected": ASK_RANDOM_STRING, "feedback": "The program should ask for a random string!"},
            "test_cases": [
                {
                    "case": "01010010010001010100100101001001",
                    "verify": [
                        {
                            "expected": "current data length",
                            "feedback": "'current data length' is not found in the output!"},
                        {"expected": "32", "feedback": "Value for 'data length' is wrong!"},
                        {"expected": "68", "feedback": "Value for for 'symbol left' is wrong!"},
                        {"expected": ASK_RANDOM_STRING, "feedback": f"The program should ask for a random string!"},
                    ]
                },
                {
                    "case": "10100011001010101010111101001001011010",
                    "verify": [
                        {
                            "expected": "current data length",
                            "feedback": "'current data length' is not found in the output!"},
                        {"expected": "70", "feedback": "Value for 'data length' is wrong!"},
                        {"expected": "30", "feedback": "Value for for 'symbol left' is wrong!"},
                        {"expected": ASK_RANDOM_STRING, "feedback": f"The program should ask for a random string!"},
                    ]
                },
                {
                    "case": "0101101010100110101010101010001110011",
                    "verify": [
                        {
                            "expected": "Final data string:",
                            "feedback": "'Final data string:' is not found in the output!"
                        },
                        {
                            "expected": "01010010010001010100100101001001101000110010101010101111010010010110100101101010100110101010101010001110011",
                            "feedback": "Final data string is wrong!"
                        },
                        {
                            "expected": "000: 0,3",
                            "feedback": "Triad '000' not found  or value is wrong!\n"
                                        "The output format must be: '000: 1,1'\n"
                        },
                        {
                            "expected": "001: 10,5",
                            "feedback": "Triad '001' not found  or value is wrong!\n"
                                        "The output format must be: '001: 1,1'"
                        },
                        {
                            "expected": "010: 13,18",
                            "feedback": "Triad '010' not found  or value is wrong!\n"
                                        "The output format must be: '010: 1,1'"
                        },
                        {
                            "expected": "011: 5,2",
                            "feedback": "Triad '011' not found  or value is wrong!\n"
                                        "The output format must be: '011: 1,1'"
                        },
                        {
                            "expected": "100: 3,12",
                            "feedback": "Triad '100' not found  or value is wrong!\n"
                                        "The output format must be: '100: 1,1'"
                        },
                        {
                            "expected": "101: 20,3",
                            "feedback": "Triad '101' not found  or value is wrong!\n"
                                        "The output format must be: '101: 1,1'"
                        },
                        {
                            "expected": "110: 2,5",
                            "feedback": "Triad '110' not found  or value is wrong!\n"
                                        "The output format must be: '110: 1,1'"
                        },
                        {
                            "expected": "111: 2,1",
                            "feedback": "Triad '111' not found  or value is wrong!\n"
                                        "The output format must be: '111: 1,1'"
                        },
                    ]
                },
            ]
        },
        {
            "start": {"expected": ASK_RANDOM_STRING, "feedback": "The program should ask for a random string!"},
            "test_cases": [
                {
                    "case": "1010101101010",
                    "verify": [
                        {
                            "expected": "current data length",
                            "feedback": "'current data length' is not found in the output!"},
                        {"expected": "13", "feedback": "Value for 'data length' is wrong!"},
                        {"expected": "87", "feedback": "Value for for 'symbol left' is wrong!"},
                        {"expected": ASK_RANDOM_STRING, "feedback": f"The program should ask for a random string!"},
                    ]
                },
                {
                    "case": "1010100111001010010101001010100001010001",
                    "verify": [
                        {
                            "expected": "current data length",
                            "feedback": "'current data length' is not found in the output!"},
                        {"expected": "53", "feedback": "Value for 'data length' is wrong!"},
                        {"expected": "47", "feedback": "Value for for 'symbol left' is wrong!"},
                        {"expected": ASK_RANDOM_STRING, "feedback": f"The program should ask for a random string!"},
                    ]
                },
                {
                    "case": "01010000100101011010001001000101011101000101010010100101",
                    "verify": [
                        {
                            "expected": "Final data string:",
                            "feedback": "'Final data string:' is not found in the output!"
                        },
                        {
                            "expected": "1010101101010101010011100101001010100101010000101000101010000100101011010001001000101011101000101010010100101",
                            "feedback": "Final data string is wrong!"
                        },
                        {
                            "expected": "000: 2,6",
                            "feedback": "Triad '000' not found  or value is wrong!\n"
                                        "The output format must be: '000: 1,1'"
                        },
                        {
                            "expected": "001: 13,1",
                            "feedback": "Triad '001' not found  or value is wrong!\n"
                                        "The output format must be: '001: 1,1'"
                        },
                        {
                            "expected": "010: 13,22",
                            "feedback": "Triad '010' not found  or value is wrong!\n"
                                        "The output format must be: '010: 1,1'"
                        },
                        {
                            "expected": "011: 2,2",
                            "feedback": "Triad '011' not found  or value is wrong!\n"
                                        "The output format must be: '011: 1,1'"
                        },
                        {
                            "expected": "100: 6,8",
                            "feedback": "Triad '100' not found  or value is wrong!\n"
                                        "The output format must be: '100: 1,1'"
                        },
                        {
                            "expected": "101: 22,3",
                            "feedback": "Triad '101' not found  or value is wrong!\n"
                                        "The output format must be: '101: 1,1'"
                        },
                        {
                            "expected": "110: 1,3",
                            "feedback": "Triad '110' not found  or value is wrong!\n"
                                        "The output format must be: '110: 1,1'"
                        },
                        {
                            "expected": "111: 2,0",
                            "feedback": "Triad '111' not found  or value is wrong!\n"
                                        "The output format must be: '111: 1,1'"
                        },
                    ]
                },
            ]
        },
        {
            "start": {"expected": ASK_RANDOM_STRING, "feedback": "The program should ask for a random string!"},
            "test_cases": [
                {
                    "case": "1010101101010_some_wrong_symbols",
                    "verify": [
                        {
                            "expected": "current data length",
                            "feedback": "'current data length' is not found in the output!"},
                        {"expected": "13", "feedback": "Value for 'data length' is wrong!"},
                        {"expected": "87", "feedback": "Value for for 'symbol left' is wrong!"},
                        {"expected": ASK_RANDOM_STRING, "feedback": f"The program should ask for a random string!"},
                    ]
                },
                {
                    "case": "1010100111001010010101001010100001010001_some_more_wrong_symbols",
                    "verify": [
                        {
                            "expected": "current data length",
                            "feedback": "'current data length' is not found in the output!"},
                        {"expected": "53", "feedback": "Value for 'data length' is wrong!"},
                        {"expected": "47", "feedback": "Value for for 'symbol left' is wrong!"},
                        {"expected": ASK_RANDOM_STRING, "feedback": f"The program should ask for a random string!"},
                    ]
                },
                {
                    "case": "01010000100101011010001001000101011101000101010010100101",
                    "verify": [
                        {
                            "expected": "Final data string:",
                            "feedback": "'Final data string:' is not found in the output!"
                        },
                        {
                            "expected": "1010101101010101010011100101001010100101010000101000101010000100101011010001001000101011101000101010010100101",
                            "feedback": "Final data string is wrong!"
                        },
                        {
                            "expected": "000: 2,6",
                            "feedback": "Triad '000' not found  or value is wrong!"
                        },
                        {
                            "expected": "001: 13,1",
                            "feedback": "Triad '001' not found  or value is wrong!"
                        },
                        {
                            "expected": "010: 13,22",
                            "feedback": "Triad '010' not found  or value is wrong!"
                        },
                        {
                            "expected": "011: 2,2",
                            "feedback": "Triad '011' not found  or value is wrong!"
                        },
                        {
                            "expected": "100: 6,8",
                            "feedback": "Triad '100' not found  or value is wrong!"
                        },
                        {
                            "expected": "101: 22,3",
                            "feedback": "Triad '101' not found  or value is wrong!"
                        },
                        {
                            "expected": "110: 1,3",
                            "feedback": "Triad '110' not found  or value is wrong!"
                        },
                        {
                            "expected": "111: 2,0",
                            "feedback": "Triad '111' not found  or value is wrong!"
                        },
                    ]
                },
            ]
        },
    ]


    class GenRandTest(StageTest):

        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.output = None

        def case_test(self, dict_):
            """Tests case/expected"""
            t = TestedProgram()
            self.output = t.start()
            if dict_["start"]["expected"].lower() not in self.output.lower():
                return CheckResult.wrong(dict_["start"]["feedback"])

            for test_case in dict_["test_cases"]:
                self.output = t.execute(test_case["case"])
                for item in test_case["verify"]:
                    if item["expected"].lower() not in self.output.lower():
                        return CheckResult.wrong(item["feedback"])
            return CheckResult.correct()

        @dynamic_test(data=test_data_1)
        def test1(self, dict_):
            """Case test
            """
            return self.case_test(dict_)


    if __name__ == '__main__':
        GenRandTest('predictor.predictor').run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import GenRandTest

    if __name__ == '__main__':
        GenRandTest('predictor.predictor').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/12096#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 17 May 2023 19:02:12 UTC"
record: 2
